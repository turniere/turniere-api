openapi: 3.0.0
info:
  title: Turniere
  description: Turniere API
  version: 0.1.0
servers:
  - url: https://api.turnie.re/
tags:
  - name: users
    description: User management
  - name: tournaments
    description: Tournament management
  - name: matches
    description: Match management
  - name: teams
    description: Team management
paths:
  /users:
    post:
      tags: [users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
  /users/sign_in:
    post:
      tags: [users]
      summary: Login user to obtain token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: alice@example.org
                password:
                  type: string
                  example: "123456"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
          headers:
            access-token:
              description: Access token for the next request
              schema:
                type: string
            token-type:
              description: Type of the given token
              schema:
                type: string
                example: Bearer
            client:
              description: Client used for authentication
              schema:
                type: string
                example: desktop
            uid:
              description: User id
              schema:
                type: string
                example: alice@example.org
            expiry:
              description: Time of expiry of the token
              schema:
                type: string
                example: 99999
        401:
          description: Wrong credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                      example: Invalid login credentials. Please try again.
  /users/{username}:
    get:
      tags: [users]
      summary: Obtain user information
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [users]
      summary: Update user information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [users]
      summary: Delete a user
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /tournaments:
    post:
      tags: [tournaments]
      summary: Create a new tournament
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                team_names:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Created tournament object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
  /tournaments/{code}:
    get:
      tags: [tournaments]
      summary: Receive a tournament
      responses:
        200:
          description: Tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [tournaments]
      summary: Update a tournament
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
      responses:
        200:
          description: Updated tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /matches/{id}:
    get:
      tags: [matches]
      summary: Receive a match
      responses:
        200:
          description: Match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [matches]
      summary: Update a match
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        200:
          description: Updated match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /teams/{id}:
    get:
      tags: [teams]
      summary: Receive a team
      responses:
        200:
          description: Team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [teams]
      summary: Update a team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        200:
          description: Updated team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      in: header
      description: https://devise-token-auth.gitbook.io/devise-token-auth/conceptual
  schemas:
    User:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          writeOnly: true
          type: string
    Tournament:
      type: object
      properties:
        code:
          readOnly: true
          type: string
        title:
          type: string
        description:
          type: string
        teams:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Team'
        stages:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Stage'
    Team:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        name:
          type: string
    Stage:
      type: object
      properties:
        level:
          type: integer
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Match'
    Match:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        team1:
          readOnly: true
          $ref: '#/components/schemas/Team'
        team2:
          readOnly: true
          $ref: '#/components/schemas/Team'
        score1:
          type: integer
        score2:
          type: integer
        live:
          type: boolean
  responses:
    Success:
      description: Success
    UnauthorizedError:
      description: Access token missing or invalid
    NotFoundError:
      description: Object not found
security:
  - bearerAuth: []
